package edu.sjsu.cmpe.cache.client;

import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.atomic.AtomicInteger;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.hash.Funnel;
import com.google.common.hash.Funnels;
import com.google.common.hash.Hashing;

public class Client {
	private static String dataToInsert = "abcdefghij";
	private static List<CacheServiceInterface> cacheList;
    public static void main(String[] args) throws Exception {
        
        System.out.println("Starting Cache Client...");
        
        HashFunction hashFunction = new HashFunction();
        
        CacheServiceInterface cache1 = new DistributedCacheService(
                "http://localhost:3000");
        
        CacheServiceInterface cache2 = new DistributedCacheService(
                "http://localhost:3001");

        CacheServiceInterface cache3 = new DistributedCacheService(
                "http://localhost:3002");
        
        cacheList = new ArrayList<CacheServiceInterface>();
        
        cacheList.add(cache1);
        cacheList.add(cache2);
        cacheList.add(cache3);
        
        //Consistent Hashing
        HashingInterface consistentHashing = new ConsistentHashingImpl(cacheList, hashFunction);
        doConsistentHashing(consistentHashing);
                
        //Rendezvous Hashing
        doRendezvousHashing();
    }
    
    public static void doConsistentHashing(HashingInterface consistentHashing)  throws Exception {
    	System.out.println("Starting Consistent Hashing");
    	CacheServiceInterface cache;
    	//For 10 values
        for(int data=0;data<10;data++){
            
            cache = (CacheServiceInterface) consistentHashing.get(String.valueOf(dataToInsert.charAt(data)));
            
            cache.put(Long.parseLong(String.valueOf(data+1)), String.valueOf(dataToInsert.charAt(data)));
            System.out.println("put(" + (data+1) + "=>" + dataToInsert.charAt(data) + ")");
            
            String insertedValue = cache.get(data+1);
            System.out.println("get(" + (data+1) + "=>" + insertedValue + ")");
        }
        System.out.println("Ending Consistent Hashing");
    }
    
    //RendezvousHashing
    public static void doRendezvousHashing()  throws Exception {
    	System.out.println("Starting Rendezvous Hashing");
    	//ConcurrentSkipListSet listSet = new ConcurrentSkipListSet(cacheList);
    	List<String> cacheServers = new ArrayList<String>();
    	for(int i=0;i<3;i++){
    		cacheServers.add("http://localhost:300" + String.valueOf(i));
    	}
    	
    	//Key funnel
    	Funnel<Integer> keyFunnel = Funnels.integerFunnel();
    	
    	//Node funnel
    	Funnel<CharSequence> nodeFunnel = Funnels.stringFunnel(Charset.defaultCharset());
    	
    	//For 10 values
    	for(int data=0;data<10;data++){
    		RendezvousHash<Integer, String> rendezvousHash = new RendezvousHash(Hashing.murmur3_128(), keyFunnel, nodeFunnel, cacheServers);
    		
    		String serverInstance = rendezvousHash.get(data);
    		
    		//Map that instance
    		CacheServiceInterface cache = new DistributedCacheService(serverInstance);
    		
    		System.out.println("put(" + (data+1) + "=>" + dataToInsert.charAt(data) + ")");
    		cache.put(data+1, String.valueOf(dataToInsert.charAt(data)));
    		
    		String insertedData = cache.get(data+1);
            System.out.println("get(" + (data+1) + "=>" + insertedData + ")");
    	}

    	System.out.println("Ending Rendezvous Hashing");
    }
    


}
